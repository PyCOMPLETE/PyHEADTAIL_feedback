# Changelog

## v0.1.1 -> v0.1.2
    * The previous solution to the np.dot performance issue in LSF did not work with all python versions. Thus in this
      version matrix product has been written in Cython which seems to be a stable solution to the problem.

## v0.1.0 -> v0.1.1
    * np.dot slowed down the calculations in LSF by a factor of two or more. It has been solved by using a solution which
      utilizes Gemm function from BLAS (scipy.linalg.get_blas_funcs("gemm"))
    * Minor modifications to the comments

## v0.0.3 -> v0.1.0
    * critical changes in API!
    * statistical variable check has been add to feedback classes in feedback.py file
        * Calculations of the statistical variables in the Slicer of PyHEADTAIL are heavy. In earlier versions
          the option All was used for required variables in the Slicer. In this version required variables are
          determined in every processors, and those parameters have been ridden in the feedback classes
    * naming of the filters is standardized
    * new abstract filter class has been implemented
        * a option for delay is included. This is because if the separated delay element can disturb signal
          processing due to finite signal lenght -> can be minimized by using filter, whose signal response exceed
          the length of the stored signal
        * a option for 2nd cutoff frequency is included, which provides possibility to a unphysical behaviours caused by
          infinite bandwidth of the filters. In practice, this means that signal response below the 2nd cutoff frequency
          is reduced by averaging signal by cutting the tip of the impulse responses
    * bypass processors implemented by using every abstract class of signal processors
        * helps testing
    * the parameter phase per turn changed to tune in the register classes
    * generation of the matrix in LinearTransform processors is optimized
        * the abstract class includes parameter matrix_symmetry which tells about unique elements in the matrix
        * at the moment only option 'fully_diagonal' is implemented, which speeds up the generation of the matrix
          an order of magnitude or even more
    * processors have been divided into different files
          * processors.py includes also processors which are based on classses of
            LinearTransform, Addition, Multiplication or Register
          * derived_processes.py includes processors which are based on the procesessors in processors.py
          * test_processors.py includes processors used mainly for testing
    * clear_matrix() method included to LinearTransform class
    * mixers.py is removed and method namely combiner is included to kicker class
        * Need for multiple mixer/combiner types was not found -> simpler code and usage
    * location (phase advance) as a input argument for register is removed
        * location is now given as a input argument for pickup object
        * process(*args) of the signal processors carries now also the location of the pickup
            -> is saved to register, when process(...) is called first time
    * the name of position/location of the pickup and kicker objects is changed to phase_advance
    * a sinc filter has been added to processors.py
    * digital_processors.py has been added, which includes signal processors emulating digtal signal processing
        (ADC, DAC, FIR filters, FIR registers)
    * test_tools.py has been written, which includes tools for testing the signal processors
    * a set of examples has been written
    * etc...







